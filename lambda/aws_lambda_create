import boto3
import json
from botocore.exceptions import ClientError

# change to what you want
role_name = "lambda role name to use "
runtime_code = "python2.7" # you can use node.js etc ....
policy_name = "lambda policy name"
function_name = "lambda name "
cloudwatch_role_name = "cloudwatch name"

class lambda_func_aws(object):
    def __init__(self, function_name, runtime_code ,role_name,policy_name,cloudwatch_role_name):
        self.function_name = function_name
        self.runtime_code = runtime_code
        self.role_name = role_name
        self.role_name_arn = ""
        self.policy_arn = ""
        self.lambda_arn = ""
        self.handler_name = "lambda_function.lambda_handler"
        self.policy_name = policy_name
        self.lambda_policy = {
             "Version": "2012-10-17",
                "Statement": [{
                        "Sid": "VisualEditor1",
                        "Effect": "Allow",
                        "Action": [
                            "iam:DeleteUser",
                            "iam:DeleteAccessKey",
                            "iam:DetachUserPolicy",
                            "iam:AttachRolePolicy",
                            "iam:PutRolePolicy",
                            "iam:List*",
                            "iam:Get*",
                            "iam:AttachUserPolicy",
                            "iam:AttachGroupPolicy",
                            "iam:PutUserPolicy"
                        ],
                        "Resource": [
                            "arn:aws:iam::*:policy/*",
                            "arn:aws:iam::*:user/*",
                            "arn:aws:iam::*:role/*",
                            "arn:aws:iam::*:group/*"
                        ]
                    },
                    {
                        "Sid": "VisualEditor2",
                        "Effect": "Allow",
                        "Action": "iam:ListUsers",
                        "Resource": "arn:aws:iam::*:*"
                    },
                    {
                        "Sid": "VisualEditor3",
                        "Effect": "Allow",
                        "Action": "iam:ListRoles",
                        "Resource": "arn:aws:iam::*:*"
                    },
                    {
                        "Sid": "VisualEditor4",
                        "Effect": "Allow",
                        "Action": "iam:ListGroups",
                        "Resource": "arn:aws:iam::*:*"
                    },
                    {
                        "Sid": "VisualEditor5",
                        "Effect": "Allow",
                        "Action": "iam:ListPolicies",
                        "Resource": "arn:aws:iam::*:*"
                    },
                    {
                        "Sid": "VisualEditor6",
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                            ],
                        "Resource": "arn:aws:logs:*:*:*"
                    }

                ]
            }
        self.assume_role_policy_document = {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Principal": {
                    "Service": "lambda.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                }]
            }
        self.cloudwatch_role_name = cloudwatch_role_name
        self.cloudwatch_name = policy_name
        self.cloudwatch_scheduleexpression = policy_name
        self.cloudwatch = policy_name
        self.cloudwatch_arn = ""
        self.connection_init()
    def connection_init(self):
        self.Session_lambda = boto3.Session(profile_name='AWS Profile',region_name='us-east-1')
        self.Session_iam = boto3.Session(profile_name='AWS Profile',region_name='us-east-1')
        self.Session_cloudwatch = boto3.Session(profile_name='AWS Profile',region_name='us-east-1')
        self.lambda_func = self.Session_lambda.client('lambda')
        self.iam = self.Session_iam.client('iam')
        self.cloudwatch = self.Session_cloudwatch.client('events')
        self.__create_policy_for_lambda()
        self.__create_lambda_role()
        self.__attach_role_to_policy()
        self.__create_lambda()
        self.__get_lambda_arn_if_exsist()
        self.__cloudwatch_put_rule()
        self.__cloudwatch_put_targets()
        self.__add_permission_lambda()
        self.__cloudeatch_enable_rule()


    def __get_role_if_exsist(self):
        response = self.iam.get_role(
            RoleName=self.role_name
            )
        self.role_name_arn = response['Role']['Arn']
    def __get_policy_arn_if_exsist(self):
        response = self.iam.list_policies(
            Scope='Local',
            OnlyAttached=False,
            MaxItems=1000
        )
        for policy in response['Policies']:
            if policy['PolicyName'] == self.policy_name:
                self.policy_arn = policy['Arn']
    def __get_lambda_arn_if_exsist(self):
        response = self.lambda_func.get_function(
            FunctionName=self.function_name
            )
        self.lambda_arn = response['Configuration']['FunctionArn']
    def __create_lambda(self):
        try:
            response = self.lambda_func.create_function(
                FunctionName=self.function_name,
                Runtime=self.runtime_code,
                Role=self.role_name_arn,
                Handler='lambda_function.lambda_handler',
                Code={
                    'ZipFile': open('./deploy.zip', 'rb').read()
                },
                Timeout=3,
                MemorySize=128,
                Publish=True
            )
            self.lambda_arn = response['FunctionArn']
        except ClientError as e:
            try:
                self.__get_lambda_arn_if_exsist()

            except ClientError as e:
                print e.response['Error']['Code']
                print e.response['Error']['Message']
    def __create_lambda_role(self):
        try:
            response = self.iam.create_role(
                RoleName=self.role_name,
                AssumeRolePolicyDocument=json.dumps(self.assume_role_policy_document)
                )
            print response
        except ClientError as e:
            try:
                self.__get_role_if_exsist()
            except ClientError as e:
                print e.response['Error']['Code']
                print e.response['Error']['Message']
    def __create_policy_for_lambda(self):
        try:
            response = self.iam.create_policy(
                PolicyName=self.policy_name,
                PolicyDocument=json.dumps(self.lambda_policy)
                )
            self.role_name_arn = response['Role']['Arn']
            self.__set_default_policy_version()
        except ClientError as e:
            try:
                self.__get_policy_arn_if_exsist()
                self.__set_default_policy_version()
            except ClientError as e:
                print e.response['Error']['Code']
                print e.response['Error']['Message']
    def __attach_role_to_policy(self):
        response = self.iam.attach_role_policy(
            RoleName=self.role_name,
            PolicyArn=self.policy_arn
        )
    def __set_default_policy_version(self):
        response = self.iam.set_default_policy_version(
            PolicyArn=self.policy_arn,
            VersionId='v1'
            )
    def __cloudwatch_put_rule(self):
        try:
            response = self.cloudwatch.put_rule(
                Name=self.cloudwatch_role_name,
                ScheduleExpression='cron(5,15,25,35,45,55 * * * ? *)',
                State='DISABLED'
                )
            self.cloudwatch_arn = response['RuleArn']
            print response
        except ClientError as e:
            print e.response['Error']['Code']
            print e.response['Error']['Message']
    def __cloudwatch_put_targets(self):
        try:
            response = self.cloudwatch.put_targets(
                Rule=self.cloudwatch_role_name,
                Targets=[
                    {
                        'Id': '1',
                        'Arn': self.lambda_arn
                    },
                ]
            )
        except ClientError as e:
            print e.response['Error']['Code']
            print e.response['Error']['Message']
    def __cloudeatch_enable_rule(self):
        response = self.cloudwatch.enable_rule(
            Name=self.cloudwatch_role_name
            )
    def __add_permission_lambda(self):
        response = self.lambda_func.add_permission(
            FunctionName=self.function_name,
            StatementId="AllowRuleToInvoke",
            Action='lambda:InvokeFunction',
            Principal='events.amazonaws.com',
            SourceArn=self.cloudwatch_arn
            )

test = lambda_func_aws(function_name,runtime_code ,role_name,policy_name,cloudwatch_role_name)